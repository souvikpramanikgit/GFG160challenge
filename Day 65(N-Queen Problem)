class Solution {
  public:
    bool issafe(int row, int col, vector<string>& board, int n) {
        int duprow = row, dupcol = col;

        while (row >= 0 && col >= 0) {
            if (board[row][col] == 'Q') return false;
            row--; col--;
        }
 
        row = duprow; col = dupcol;
 
        while (col >= 0) {
            if (board[row][col] == 'Q') return false;
            col--;
        }
 
        row = duprow; col = dupcol;
 
        while (row < n && col >= 0) {
            if (board[row][col] == 'Q') return false;
            row++; col--;
        }
 
        return true;
    }
    
    void f(int col, vector<string>& board, vector<vector<string>>& ans, int n) {
        if (col == n) {
            ans.push_back(board);
            return;
        }
        for (int row = 0; row < n; row++) {
            if (issafe(row, col, board, n)) {
                board[row][col] = 'Q';
                f(col + 1, board, ans, n);
                board[row][col] = '.';
            }
        }
    }
    
    vector<vector<int>> nQueen(int n) {
        // code here
        vector<vector<string>> ans;
        vector<string> board(n,string(n,'.'));
        
        f(0,board,ans,n);
        
        vector<vector<int>> store;
        
        for (auto &temp : ans) {
            vector<int> a;
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (temp[j][k] == 'Q') {
                        a.push_back(k + 1);
                    }
                }
            }
            store.push_back(a);
        }
        return store;
    }
};

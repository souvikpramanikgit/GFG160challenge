/*
// Tree Node
class Node {
  public:
    int data;
    Node* left;
    Node* right;

    // Constructor to initialize a new node
    Node(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};
*/

class Solution {
  public:
  void leftboundry(Node *root,vector<int>& ans) {
      if(!root) return;
      if(!root->left && ! root->right) return;
      if(root) ans.push_back(root->data);
      leftboundry(root->left,ans);
      if(!root->left && root->right) {
           leftboundry(root->right,ans);
      }
  }
  void rightboundry(Node *root,vector<int>& ans) {
      if(!root) return;
      if(!root->left && ! root->right) return;
      rightboundry(root->right,ans);
      if(root->left && !root->right) {
           rightboundry(root->left,ans);
      }
      if(root) {
          ans.push_back(root->data);
      }
  }
   void boundry(Node *root,vector<int>&ans) {
       if(!root) return;
        if(!root->left && !root->right) {
           ans.push_back(root->data);
       }
       
       boundry(root->left,ans);
       boundry(root->right,ans);
   }
    vector<int> boundaryTraversal(Node *root) {
        // code here
        vector<int> ans;
        
        ans.push_back(root->data);
        if(!root->left &&!root->right) return ans;
        leftboundry(root->left,ans);
        boundry(root,ans);
        rightboundry(root->right,ans);
        return ans;
    }
};
